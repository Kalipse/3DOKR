#Docker compose Swarm

version: "3.7"

services:
  # Service Redis utilisé pour le stockage en cache
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-volume:/data
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli ping | grep -q PONG"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - network-redis

  # Service PostgreSQL utilisé pour la base de données
  postgres:
    image: postgres:alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - network-postgres

  # Service utilisateur personnalisé
  user:
    image: user-service:latest
    ports:
      - "8888:8888"
    depends_on:
      - redis
      - postgres
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "true"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - network-user

  # Service de vote
  vote:
    image: vote-service:latest
    ports:
      - "8080:8080"
    depends_on:
      - redis
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:8080 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - network-redis

  # Worker service qui dépend de Redis et PostgreSQL
  worker:
    image: worker-service:latest
    depends_on:
      - redis
      - postgres
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "true"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - network-redis
      - network-postgres

  # Service de résultat qui dépend du worker
  result:
    image: result-service:latest
    ports:
      - "8081:8888"
    depends_on:
      - worker
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:8888 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - network-postgres

volumes:
  redis-volume:
    # Volume pour stocker les données Redis
  postgres-volume:
    # Volume pour stocker les données PostgreSQL

networks:
  network-user:
    # Réseau personnalisé pour le service utilisateur
  network-redis:
    # Réseau personnalisé pour les services Redis et Vote
  network-postgres:
    # Réseau personnalisé pour les services PostgreSQL, Worker et Result
